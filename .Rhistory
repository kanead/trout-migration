ggplot(all_data, aes(as.numeric(as.character(sort(
iteration
))), g, col = sex)) +  stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "ribbon",
fun.data = mean_cl_normal,
alpha = 0.1,
fill=source)
#' line plot
ggplot(all_data, aes(as.numeric(as.character(sort(
iteration
))), g, col = sex)) +  stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "ribbon",
fun.data = mean_cl_normal,
alpha = 0.1) + facet_wrap(~ source)
mydata3
#' line plot
ggplot(mydata3, aes(as.numeric(as.character(sort(
iteration
))), g, col = sex)) +  stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "ribbon",
fun.data = mean_cl_normal,
alpha = 0.1) # + facet_wrap(~ source)
#' line plot
ggplot(mydata1, aes(as.numeric(as.character(sort(
iteration
))), g, col = sex)) +  stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "ribbon",
fun.data = mean_cl_normal,
alpha = 0.1) # + facet_wrap(~ source)
#' line plot
ggplot(mydata2, aes(as.numeric(as.character(sort(
iteration
))), g, col = sex)) +  stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "ribbon",
fun.data = mean_cl_normal,
alpha = 0.1) # + facet_wrap(~ source)
#' line plot
ggplot(mydata5, aes(as.numeric(as.character(sort(
iteration
))), g, col = sex)) +  stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "ribbon",
fun.data = mean_cl_normal,
alpha = 0.1) # + facet_wrap(~ source)
gdata
all_data
head(mydata1)
head(gdata)
head(all_data)
filter(mydata1, sex == "male", anadromous == "FALSE") %>% ggplot(.) +
geom_histogram(aes(g)) +
#' class of iteration needs to be changed so that it plot in numerical order
facet_wrap( ~ reorder(iteration, sort(as.numeric(iteration))))
#' boxplots
mydata1 %>% ggplot(.) +
geom_boxplot(aes(x = reorder(iteration, sort(
as.numeric(iteration)
)), y = g))
ggplot(all_data, aes(iteration, g, color = sex)) +
geom_smooth(aes(group = (source)), se = FALSE, size = 0.5) +
geom_smooth(se = FALSE, size = 2)
ggplot(all_data, aes(iteration, g, color = sex)) +
geom_smooth(aes(group = (source)), se = FALSE, size = 0.5)
ggplot(all_data, aes(iteration, g, color = sex))
+
geom_smooth(se = FALSE, size = 2)
ggplot(all_data, aes(iteration, g, color = sex))
ggplot(all_data, aes(iteration, g, color = sex)) +
geom_smooth(aes(group = (source)), se = FALSE, size = 0.5) +
+geom_smooth(se = FALSE, size = 2)
ggplot(all_data, aes(iteration, g, color = source)) +
geom_smooth(aes(group = (variable)), se = FALSE, size = 0.5)
ggplot(all_data, aes(iteration, g, color = source)) +
geom_smooth(aes(group = (sex)), se = FALSE, size = 0.5)
ggplot(all_data, aes(iteration, g, colour = source)) +
geom_point() +
geom_smooth(se = FALSE, method = lm)
ggplot(all_data, aes(iteration, g, colour = source)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(all_data, aes(iteration, g, colour = source)) +
geom_smooth(se = FALSE)
ggplot(all_data, aes(iteration, g, colour = source)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(all_data, aes(as.numeric(iteration), g, colour = source)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(all_data, aes(as.numeric(iteration), g, colour = source)) +
geom_smooth(se = FALSE)
ggplot(all_data, aes(as.numeric(iteration), g, colour = source)) +
geom_smooth(se = T)
tail(mydata5)
filter(mydata5,sex==male) %>% mean=mean(g)
filter(mydata5,sex==male) %>% mean=mean(mydata5$g)
filter(mydata5,sex=="male") %>% mean=mean(mydata5$g)
mydata5 %>% filter(iteration == 3650) %>%
group_by(sex) %>%
dplyr::summarize(Mean = mean(g, na.rm=TRUE))
mydata5 %>% filter(iteration == 3650) %>%
group_by(sex) %>%
dplyr::summarize(Length = length(sex))
ggplot(all_data, aes(as.numeric(iteration), g, colour = source)) +
geom_smooth(se = T)
ggplot(all_data, aes(as.numeric(iteration), g, colour = source)) +
geom_smooth(se = T,alpha=0.5)
ggplot(all_data, aes(as.numeric(iteration), g, colour = source)) +
geom_smooth(se = T,alpha=0.9)
ggplot(all_data, aes(as.numeric(iteration), g, colour = source)) +
geom_smooth(se = T,alpha=0.1)
all_data   %>% filter(sex == "male") %>%
ggplot(., aes(as.numeric(iteration), g, colour = source)) +
geom_smooth(se = T,alpha=0.1)
all_data %>% filter(sex == "female") %>%
ggplot(., aes(as.numeric(iteration), g, colour = source)) +
geom_smooth(se = T,alpha=0.1)
#' plot a smooth of the genetic value g for each run
all_data %>% filter(sex == "male") %>%
ggplot(., aes(as.numeric(iteration), g, colour = source)) +
geom_smooth(se = T,alpha=0.1)
all_data %>% filter(sex == "female") %>%
ggplot(., aes(as.numeric(iteration), g, colour = source)) +
geom_smooth(se = T,alpha=0.1)
all_data %>% filter(sex == "male") %>%
ggplot(., aes(as.numeric(iteration), g, colour = source)) +
geom_smooth(se = T,alpha=0.2)
all_data %>% filter(sex == "female") %>%
ggplot(., aes(as.numeric(iteration), g, colour = source)) +
geom_smooth(se = T,alpha=0.2)
NLQuit()
#' R interface for trout migration model
#' tutorial for RNetLogo
#' https://www.youtube.com/watch?v=3EmHi0roiM8
#' you may need to download 64 bit java if you get an error
#' https://www.java.com/en/download/manual.jsp
#' load the libraries
library(RNetLogo)
library(ggplot2)
library(tidyverse)
library(Hmisc) # used for plotting
#' identify the location of NetLogo
#' this returns an error code but it still works
NLStart("C:\\Program Files\\NetLogo 6.0.4\\app",
gui = T,
nl.jarname = "netlogo-6.0.4.jar")
#' path to the model on my desktop
NLLoadModel(
"C:\\Users\\Adam Kane\\Documents\\Manuscripts\\Trout migration\\trout-migration\\trout-migration-full-time-matrix.nlogo"
)
#' change the parameter values ---
#' starting population of trout
NLCommand("set n-trout 200")
#' male freshwater mortality
NLCommand("set mortalityM 1e-05")
#' female freshwater mortality
NLCommand("set mortalityF 1e-05")
#' male marine mortality multiplier
NLCommand("set anad-death-multiplierM 2")
#' female marine mortality multiplier
NLCommand("set anad-death-multiplierF 2")
#' cost of being parasitised multiplier
NLCommand("set parasite-load 2")
#' range that females can see potential mates
NLCommand("set female-mate-radius 2")
#' freshwater carrying capacity
NLCommand("set carryingCapacity 300")
#' proportion of marine patches that have parasites
NLCommand("set prop-parasites 0.1")
#' sneaker tactic by resident males on or off
NLCommand("set sneaker? TRUE")
#' set the threshold proportion of anadramous males
#' around which a resident should find itself before
#' adopting a sneaker tactic
NLCommand("set sneaker_thresh 0.8")
#' set the bump in quality that a sneaker male
#' gets which will affect its chance of being
#' selected
NLCommand("set sneaker_boost 200")
#' mean quality of resident trout
NLCommand("set res_quality_mean 100")
#' SD quality of resident trout
NLCommand("set res_quality_sd 10")
#' mean quality of parasitised trout
NLCommand("set paras_quality_mean 150")
#' SD quality of parasitised trout
NLCommand("set paras_quality_sd 10")
#' mean quality of marine trout
NLCommand("set anad_quality_mean 200")
#' SD quality of marine trout
NLCommand("set anad_quality_sd 10")
#' control the number of loci that have a different
#' sign in males than in females
#' 0 means all loci are the same between sexes
#' 20 means all loci are different between sexes
NLCommand("set n-loci-sign 0")
#' the function for the model
simfun <- function(carryingCapacity) {
NLCommand("set carryingCapacity ", carryingCapacity, "setup")
#' the reporters for the model
vars <- c("ticks", "who", "g" , "sex", "gm_val")
agents <- "turtles"
reporters <- sprintf("map [x -> [%s] of x ] sort %s", vars, agents)
nlogo_ret <- RNetLogo::NLReport(reporters)
run <-
NLDoReport(
100,
"repeat 365 [go]",
c("ticks", reporters),
as.data.frame = T,
df.col.names = c("ticks", reporters)
)
}
#' the function for the model
simfun <- function(carryingCapacity) {
NLCommand("set carryingCapacity ", carryingCapacity, "setup")
#' the reporters for the model
vars <- c("ticks", "who", "g" , "sex", "gm_val")
agents <- "turtles"
reporters <- sprintf("map [x -> [%s] of x ] sort %s", vars, agents)
nlogo_ret <- RNetLogo::NLReport(reporters)
run <-
NLDoReport(
10,
"repeat 3650 [go]",
c("ticks", reporters),
as.data.frame = T,
df.col.names = c("ticks", reporters)
)
}
# Replicate the simulation
rep.sim <- function(carryingCapacity, rep) {
lapply(carryingCapacity, function(x) replicate(rep, simfun(x)))
}
#will take about 10 minutes !
K <- c(300)
#will take about 10 minutes !
K <- c(300)
res <- rep.sim(K, 5)  #replicate sim 10 times for each K
res1<-res[[1]][,1]
res2<-res[[1]][,2]
res3<-res[[1]][,3]
res4<-res[[1]][,4]
res5<-res[[1]][,5]
mydata1 <-
data.frame(cbind(
unlist(res1$`map [x -> [sex] of x ] sort turtles`),
unlist(res1$`map [x -> [g] of x ] sort turtles`),
unlist(res1$`map [x -> [ticks] of x ] sort turtles`),
unlist(res1$`map [x -> [anadromous] of x ] sort turtles`),
unlist(res1$`map [x -> [who] of x ] sort turtles`)
))
mydata2 <-
data.frame(cbind(
unlist(res2$`map [x -> [sex] of x ] sort turtles`),
unlist(res2$`map [x -> [g] of x ] sort turtles`),
unlist(res2$`map [x -> [ticks] of x ] sort turtles`),
unlist(res2$`map [x -> [anadromous] of x ] sort turtles`),
unlist(res2$`map [x -> [who] of x ] sort turtles`)
))
mydata3 <-
data.frame(cbind(
unlist(res3$`map [x -> [sex] of x ] sort turtles`),
unlist(res3$`map [x -> [g] of x ] sort turtles`),
unlist(res3$`map [x -> [ticks] of x ] sort turtles`),
unlist(res3$`map [x -> [anadromous] of x ] sort turtles`),
unlist(res3$`map [x -> [who] of x ] sort turtles`)
))
mydata4 <-
data.frame(cbind(
unlist(res4$`map [x -> [sex] of x ] sort turtles`),
unlist(res4$`map [x -> [g] of x ] sort turtles`),
unlist(res4$`map [x -> [ticks] of x ] sort turtles`),
unlist(res4$`map [x -> [anadromous] of x ] sort turtles`),
unlist(res4$`map [x -> [who] of x ] sort turtles`)
))
mydata5 <-
data.frame(cbind(
unlist(res5$`map [x -> [sex] of x ] sort turtles`),
unlist(res5$`map [x -> [g] of x ] sort turtles`),
unlist(res5$`map [x -> [ticks] of x ] sort turtles`),
unlist(res5$`map [x -> [anadromous] of x ] sort turtles`),
unlist(res5$`map [x -> [who] of x ] sort turtles`)
))
#' rename the variables
mydata1 <-
rename(
mydata1,
sex = X1,
g = X2,
iteration = X3,
anadromous = X4,
who = X5
)
#' make sure g is classified as numeric
mydata1$g <- as.numeric(as.character(mydata1$g))
head(mydata1)
#' rename the variables
mydata2 <-
rename(
mydata2,
sex = X1,
g = X2,
iteration = X3,
anadromous = X4,
who = X5
)
#' make sure g is classified as numeric
mydata2$g <- as.numeric(as.character(mydata2$g))
head(mydata2)
#' rename the variables
mydata3 <-
rename(
mydata3,
sex = X1,
g = X2,
iteration = X3,
anadromous = X4,
who = X5
)
#' make sure g is classified as numeric
mydata3$g <- as.numeric(as.character(mydata3$g))
head(mydata3)
#' rename the variables
mydata4 <-
rename(
mydata4,
sex = X1,
g = X2,
iteration = X3,
anadromous = X4,
who = X5
)
#' make sure g is classified as numeric
mydata4$g <- as.numeric(as.character(mydata4$g))
head(mydata4)
#' rename the variables
mydata5 <-
rename(
mydata5,
sex = X1,
g = X2,
iteration = X3,
anadromous = X4,
who = X5
)
#' make sure g is classified as numeric
mydata5$g <- as.numeric(as.character(mydata5$g))
head(mydata5)
#' combine the data frames
library(gdata)
all_data<-combine(mydata1,mydata2,mydata3,mydata4,mydata5)
res5
mydata1 <-
data.frame(cbind(
unlist(res1$`map [x -> [sex] of x ] sort turtles`),
unlist(res1$`map [x -> [g] of x ] sort turtles`),
unlist(res1$`map [x -> [ticks] of x ] sort turtles`),
unlist(res1$`map [x -> [anadromous] of x ] sort turtles`),
unlist(res1$`map [x -> [who] of x ] sort turtles`)
))
mydata2 <-
data.frame(cbind(
unlist(res2$`map [x -> [sex] of x ] sort turtles`),
unlist(res2$`map [x -> [g] of x ] sort turtles`),
unlist(res2$`map [x -> [ticks] of x ] sort turtles`),
unlist(res2$`map [x -> [anadromous] of x ] sort turtles`),
unlist(res2$`map [x -> [who] of x ] sort turtles`)
))
mydata3 <-
data.frame(cbind(
unlist(res3$`map [x -> [sex] of x ] sort turtles`),
unlist(res3$`map [x -> [g] of x ] sort turtles`),
unlist(res3$`map [x -> [ticks] of x ] sort turtles`),
unlist(res3$`map [x -> [anadromous] of x ] sort turtles`),
unlist(res3$`map [x -> [who] of x ] sort turtles`)
))
mydata4 <-
data.frame(cbind(
unlist(res4$`map [x -> [sex] of x ] sort turtles`),
unlist(res4$`map [x -> [g] of x ] sort turtles`),
unlist(res4$`map [x -> [ticks] of x ] sort turtles`),
unlist(res4$`map [x -> [anadromous] of x ] sort turtles`),
unlist(res4$`map [x -> [who] of x ] sort turtles`)
))
mydata5 <-
data.frame(cbind(
unlist(res5$`map [x -> [sex] of x ] sort turtles`),
unlist(res5$`map [x -> [g] of x ] sort turtles`),
unlist(res5$`map [x -> [ticks] of x ] sort turtles`),
unlist(res5$`map [x -> [anadromous] of x ] sort turtles`),
unlist(res5$`map [x -> [who] of x ] sort turtles`)
))
#' rename the variables
mydata1 <-
rename(
mydata1,
sex = X1,
g = X2,
iteration = X3,
anadromous = X4,
who = X5
)
res1<-res[[1]][,1]
res2<-res[[1]][,2]
res3<-res[[1]][,3]
res4<-res[[1]][,4]
res5<-res[[1]][,5]
mydata1 <-
data.frame(cbind(
unlist(res1$`map [x -> [sex] of x ] sort turtles`),
unlist(res1$`map [x -> [g] of x ] sort turtles`),
unlist(res1$`map [x -> [ticks] of x ] sort turtles`),
unlist(res1$`map [x -> [who] of x ] sort turtles`)
))
mydata2 <-
data.frame(cbind(
unlist(res2$`map [x -> [sex] of x ] sort turtles`),
unlist(res2$`map [x -> [g] of x ] sort turtles`),
unlist(res2$`map [x -> [ticks] of x ] sort turtles`),
unlist(res2$`map [x -> [who] of x ] sort turtles`)
))
mydata3 <-
data.frame(cbind(
unlist(res3$`map [x -> [sex] of x ] sort turtles`),
unlist(res3$`map [x -> [g] of x ] sort turtles`),
unlist(res3$`map [x -> [ticks] of x ] sort turtles`),
unlist(res3$`map [x -> [who] of x ] sort turtles`)
))
mydata4 <-
data.frame(cbind(
unlist(res4$`map [x -> [sex] of x ] sort turtles`),
unlist(res4$`map [x -> [g] of x ] sort turtles`),
unlist(res4$`map [x -> [ticks] of x ] sort turtles`),
unlist(res4$`map [x -> [who] of x ] sort turtles`)
))
mydata5 <-
data.frame(cbind(
unlist(res5$`map [x -> [sex] of x ] sort turtles`),
unlist(res5$`map [x -> [g] of x ] sort turtles`),
unlist(res5$`map [x -> [ticks] of x ] sort turtles`),
unlist(res5$`map [x -> [who] of x ] sort turtles`)
))
#' rename the variables
mydata1 <-
rename(
mydata1,
sex = X1,
g = X2,
iteration = X3,
who = X4
)
#' make sure g is classified as numeric
mydata1$g <- as.numeric(as.character(mydata1$g))
head(mydata1)
#' rename the variables
mydata2 <-
rename(
mydata2,
sex = X1,
g = X2,
iteration = X3,
who = X4
)
#' make sure g is classified as numeric
mydata2$g <- as.numeric(as.character(mydata2$g))
head(mydata2)
#' rename the variables
mydata3 <-
rename(
mydata3,
sex = X1,
g = X2,
iteration = X3,
who = X4
)
#' make sure g is classified as numeric
mydata3$g <- as.numeric(as.character(mydata3$g))
head(mydata3)
#' rename the variables
mydata4 <-
rename(
mydata4,
sex = X1,
g = X2,
iteration = X3,
who = X4
)
#' make sure g is classified as numeric
mydata4$g <- as.numeric(as.character(mydata4$g))
head(mydata4)
#' rename the variables
mydata5 <-
rename(
mydata5,
sex = X1,
g = X2,
iteration = X3,
who = X4
)
#' make sure g is classified as numeric
mydata5$g <- as.numeric(as.character(mydata5$g))
head(mydata5)
#' combine the data frames
library(gdata)
all_data<-combine(mydata1,mydata2,mydata3,mydata4,mydata5)
#' plot a smooth of the genetic value g for each run
all_data %>% filter(sex == "male") %>%
ggplot(., aes(as.numeric(iteration), g, colour = source)) +
geom_smooth(se = T,alpha=0.2)
all_data %>% filter(sex == "female") %>%
ggplot(., aes(as.numeric(iteration), g, colour = source)) +
geom_smooth(se = T,alpha=0.2)
NLQuit()
