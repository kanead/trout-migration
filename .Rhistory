#' male freshwater mortality
NLCommand("set mortalityM 1e-05")
#' female freshwater mortality
NLCommand("set mortalityF 1e-05")
#' male marine mortality multiplier
NLCommand("set anad-death-multiplierM 100")
#' female marine mortality multiplier
NLCommand("set anad-death-multiplierF 100")
#' cost of being parasitised multiplier
NLCommand("set parasite-load 2")
#' range that females can see potential mates
NLCommand("set female-mate-radius 2")
#' freshwater carrying capacity
NLCommand("set carryingCapacity 300")
#' proportion of marine patches that have parasites
NLCommand("set prop-parasites 0.1")
#' sneaker tactic by resident males on or off
NLCommand("set sneaker? TRUE")
#' set the threshold proportion of anadramous males
#' around which a resident should find itself before
#' adopting a sneaker tactic
NLCommand("set sneaker_thresh 0.8")
#' set the bump in quality that a sneaker male
#' gets which will affect its chance of being
#' selected
NLCommand("set sneaker_boost 200")
#' mean quality of resident trout
NLCommand("set res_quality_mean 100")
#' SD quality of resident trout
NLCommand("set res_quality_sd 10")
#' mean quality of parasitised trout
NLCommand("set paras_quality_mean 150")
#' SD quality of parasitised trout
NLCommand("set paras_quality_sd 10")
#' mean quality of marine trout
NLCommand("set anad_quality_mean 200")
#' SD quality of marine trout
NLCommand("set anad_quality_sd 10")
#######' run the model multiple times on the same core ----
#' this samples the model once every 3650 days ~ 10 years
#' the function for the model
simfun <- function(carryingCapacity) {
NLCommand("set carryingCapacity ", carryingCapacity, "setup")
#' the reporters for the model
vars <- c("ticks", "who", "g" , "sex", "gm_val")
agents <- "turtles"
reporters <- sprintf("map [x -> [%s] of x ] sort %s", vars, agents)
nlogo_ret <- RNetLogo::NLReport(reporters)
run <-
NLDoReport(
10,
"repeat 365 [go]",
c("ticks", reporters),
as.data.frame = T,
df.col.names = c("ticks", reporters)
)
}
#' Replicate the simulation
rep.sim <- function(carryingCapacity, rep) {
lapply(carryingCapacity, function(x) replicate(rep, simfun(x)))
}
#' will take about 10 minutes !
K <- c(300) #' carrying capacity
res <- rep.sim(K, 5)  #replicate sim 5 times for each K
class(rep)
class(res)
str(res)
summary(res)
res[1,]
res[1]
res[2]
res[[1]][,1]
class(res[[1]][,1])
list1 <- list(a = 2, b = 3)
mylist <- list(list1, list2)
list2 <- list(c = "a", d = "b")
mylist[[1]][1,]
mylist <- list(list1, list2)
mylist[[1]][1,]
mylist[[1]][,1]
mylist[[1]][,1]
mylist
summary(mylist)
summary(res)
delist <- function(for i in 1:length(x)) {
x[[1]][,i]
}
NLQuit()
#' R interface for trout migration model
#' tutorial for RNetLogo
#' https://www.youtube.com/watch?v=3EmHi0roiM8
#' you may need to download 64 bit java if you get an error
#' https://www.java.com/en/download/manual.jsp
#' load the libraries
library(RNetLogo)
library(ggplot2)
library(tidyverse)
library(Hmisc) # used for plotting
#' identify the location of NetLogo
#' this returns an error code but it still works
NLStart("C:\\Program Files\\NetLogo 6.0.4\\app",
gui = T,
nl.jarname = "netlogo-6.0.4.jar")
#' path to the model on my laptop
NLLoadModel(
"C:\\Users\\Adam\\Documents\\Science\\Manuscripts\\trout-migration\\trout-migration-full-time-matrix.nlogo"
)
#' change the parameter values ---
#' starting population of trout
NLCommand("set n-trout 100")
#' male freshwater mortality
NLCommand("set mortalityM 1e-05")
#' female freshwater mortality
NLCommand("set mortalityF 1e-05")
#' male marine mortality multiplier
NLCommand("set anad-death-multiplierM 100")
#' female marine mortality multiplier
NLCommand("set anad-death-multiplierF 100")
#' cost of being parasitised multiplier
NLCommand("set parasite-load 2")
#' range that females can see potential mates
NLCommand("set female-mate-radius 2")
#' freshwater carrying capacity
NLCommand("set carryingCapacity 300")
#' proportion of marine patches that have parasites
NLCommand("set prop-parasites 0.1")
#' sneaker tactic by resident males on or off
NLCommand("set sneaker? TRUE")
#' set the threshold proportion of anadramous males
#' around which a resident should find itself before
#' adopting a sneaker tactic
NLCommand("set sneaker_thresh 0.8")
#' set the bump in quality that a sneaker male
#' gets which will affect its chance of being
#' selected
NLCommand("set sneaker_boost 200")
#' mean quality of resident trout
NLCommand("set res_quality_mean 100")
#' SD quality of resident trout
NLCommand("set res_quality_sd 10")
#' mean quality of parasitised trout
NLCommand("set paras_quality_mean 150")
#' SD quality of parasitised trout
NLCommand("set paras_quality_sd 10")
#' mean quality of marine trout
NLCommand("set anad_quality_mean 200")
#' SD quality of marine trout
NLCommand("set anad_quality_sd 10")
#' control the number of loci that have a different
#' sign in males than in females
#' 0 means all loci are the same between sexes
#' 20 means all loci are different between sexes
NLCommand("set n-loci-sign 0")
#' setup the model
NLCommand("setup")
NLDoCommand(100, "go")
#' set up a reporter to collect data on the genotype of both sexes
vars <- c("ticks", "who", "g" , "sex", "anadromous", "gm_val")
agents <- "turtles"
reporters <- sprintf("map [x -> [%s] of x ] sort %s", vars, agents)
nlogo_ret <- RNetLogo::NLReport(reporters)
#' load the libraries
library(RNetLogo)
library(ggplot2)
library(tidyverse)
library(Hmisc) # used for plotting
#' change the parameter values ---
#' starting population of trout
NLCommand("set n-trout 100")
#' male freshwater mortality
NLCommand("set mortalityM 1e-05")
#' female freshwater mortality
NLCommand("set mortalityF 1e-05")
#' male marine mortality multiplier
NLCommand("set anad-death-multiplierM 100")
#' female marine mortality multiplier
NLCommand("set anad-death-multiplierF 100")
#' cost of being parasitised multiplier
NLCommand("set parasite-load 2")
#' range that females can see potential mates
NLCommand("set female-mate-radius 2")
#' freshwater carrying capacity
NLCommand("set carryingCapacity 300")
#' proportion of marine patches that have parasites
NLCommand("set prop-parasites 0.1")
#' sneaker tactic by resident males on or off
NLCommand("set sneaker? TRUE")
#' set the threshold proportion of anadramous males
#' around which a resident should find itself before
#' adopting a sneaker tactic
NLCommand("set sneaker_thresh 0.8")
#' set the bump in quality that a sneaker male
#' gets which will affect its chance of being
#' selected
NLCommand("set sneaker_boost 200")
#' mean quality of resident trout
NLCommand("set res_quality_mean 100")
#' SD quality of resident trout
NLCommand("set res_quality_sd 10")
#' mean quality of parasitised trout
NLCommand("set paras_quality_mean 150")
#' SD quality of parasitised trout
NLCommand("set paras_quality_sd 10")
#' mean quality of marine trout
NLCommand("set anad_quality_mean 200")
#' SD quality of marine trout
NLCommand("set anad_quality_sd 10")
#' control the number of loci that have a different
#' sign in males than in females
#' 0 means all loci are the same between sexes
#' 20 means all loci are different between sexes
NLCommand("set n-loci-sign 0")
#' setup the model
NLCommand("setup")
#' set up a reporter to collect data on the genotype of both sexes
vars <- c("ticks", "who", "g" , "sex", "anadromous", "gm_val")
agents <- "turtles"
reporters <- sprintf("map [x -> [%s] of x ] sort %s", vars, agents)
nlogo_ret <- RNetLogo::NLReport(reporters)
#' run the model for x by y ticks and extract the reporters
#' every y ticks
run <-
NLDoReport(
10,
"repeat 100 [go]",
c("ticks", reporters),
as.data.frame = T,
df.col.names = c("ticks", reporters)
)
print(run)
class(run)
run$`map [x -> [g] of x ] sort turtles`
mydata <-
data.frame(cbind(
unlist(run$`map [x -> [sex] of x ] sort turtles`),
unlist(run$`map [x -> [g] of x ] sort turtles`),
unlist(run$`map [x -> [ticks] of x ] sort turtles`),
unlist(run$`map [x -> [anadromous] of x ] sort turtles`),
unlist(run$`map [x -> [who] of x ] sort turtles`)
))
#' can extract the allele frequencies
alleleFreq <-
data.frame(cbind(unlist(run$`map [x -> [gm_val] of x ] sort turtles`)))
head(alleleFreq)
#' rename
alleleFreq <-
rename(alleleFreq, gm_val = cbind.unlist.test..map..x.....gm_val..of.x...sort.turtles...)
#' can extract the allele frequencies
alleleFreq <-
data.frame(cbind(unlist(run$`map [x -> [gm_val] of x ] sort turtles`)))
head(alleleFreq)
#' rename
alleleFreq <-
rename(alleleFreq, gm_val = cbind.unlist.run..map..x.....gm_val..of.x...sort.turtles...)
head(alleleFreq)
tail(alleleFreq, 21)
length(alleleFreq$gm_val) / 21
#' extract them for each fish
#' check this again to make sure it matches up!
lst <-
split(alleleFreq$gm_val, (seq_along(alleleFreq$gm_val) - 1) %% 21 + 1)
do.call(cbind, lapply(lst, "length<-", max(lengths(lst))))
#' stick them all together with the rest of the data
cbind(mydata, lst)
mydata <- cbind(mydata, lst)
tail(mydata)
hist(mydata$1~mydata$X3)
#' Simple example
testfun1 <- function(x) {
return(x * x)
}
my.v1 <- 1:10
my.v1.quad <- sapply(my.v1, testfun1)
my.v1.quad
library(parallel)
processors <- detectCores()
# create a cluster
cl <- makeCluster(processors)
# call parallel sapply
my.v1.quad.par <- parSapply(cl, my.v1, testfun1)
print(my.v1.quad.par)
#' Mortality rates
#' https://stats.stackexchange.com/questions/289462/converting-annual-to-daily-mortality-rate
#' annual mortality rate is given as 3.082%
amr <- 0.03082
#' what is the daily mortality rate?
1 - (1 - amr)^(1/365)
#' or
1 - exp(1/365 * log (1-amr))
#' annual mortality rate is given as 10%
amr <- 0.1
#' what is the daily mortality rate?
1 - (1 - amr)^(1/365)
#' or
1 - exp(1/365 * log (1-amr))
NLQuit()
#' load the libraries
library(RNetLogo)
library(ggplot2)
library(tidyverse)
library(Hmisc) # used for plotting
#' identify the location of NetLogo
#' this returns an error code but it still works
NLStart("C:\\Program Files\\NetLogo 6.0.4\\app",
gui = T,
nl.jarname = "netlogo-6.0.4.jar")
#' path to the model on my laptop
NLLoadModel(
"C:\\Users\\Adam\\Documents\\Science\\Manuscripts\\trout-migration\\trout-migration-full-time-matrix.nlogo"
)
#' change the parameter values ---
#' starting population of trout
NLCommand("set n-trout 100")
#' male freshwater mortality
NLCommand("set mortalityM 1e-05")
#' female freshwater mortality
NLCommand("set mortalityF 1e-05")
#' male marine mortality multiplier
NLCommand("set anad-death-multiplierM 100")
#' female marine mortality multiplier
NLCommand("set anad-death-multiplierF 100")
#' cost of being parasitised multiplier
NLCommand("set parasite-load 2")
#' range that females can see potential mates
NLCommand("set female-mate-radius 2")
#' freshwater carrying capacity
NLCommand("set carryingCapacity 300")
#' proportion of marine patches that have parasites
NLCommand("set prop-parasites 0.1")
#' sneaker tactic by resident males on or off
NLCommand("set sneaker? TRUE")
#' set the threshold proportion of anadramous males
#' around which a resident should find itself before
#' adopting a sneaker tactic
NLCommand("set sneaker_thresh 0.8")
#' set the bump in quality that a sneaker male
#' gets which will affect its chance of being
#' selected
NLCommand("set sneaker_boost 200")
#' mean quality of resident trout
NLCommand("set res_quality_mean 100")
#' SD quality of resident trout
NLCommand("set res_quality_sd 10")
#' mean quality of parasitised trout
NLCommand("set paras_quality_mean 150")
#' SD quality of parasitised trout
NLCommand("set paras_quality_sd 10")
#' mean quality of marine trout
NLCommand("set anad_quality_mean 200")
#' SD quality of marine trout
NLCommand("set anad_quality_sd 10")
#' control the number of loci that have a different
#' sign in males than in females
#' 0 means all loci are the same between sexes
#' 20 means all loci are different between sexes
NLCommand("set n-loci-sign 0")
#' setup the model
NLCommand("setup")
#' set up a reporter to collect data on the genotype of both sexes
vars <- c("ticks", "who", "g" , "sex", "anadromous", "gm_val")
agents <- "turtles"
reporters <- sprintf("map [x -> [%s] of x ] sort %s", vars, agents)
nlogo_ret <- RNetLogo::NLReport(reporters)
#' run the model for x by y ticks and extract the reporters
#' every y ticks
run <-
NLDoReport(
10,
"repeat 5 [go]",
c("ticks", reporters),
as.data.frame = T,
df.col.names = c("ticks", reporters)
)
mydata <-
data.frame(cbind(
unlist(run$`map [x -> [sex] of x ] sort turtles`),
unlist(run$`map [x -> [g] of x ] sort turtles`),
unlist(run$`map [x -> [ticks] of x ] sort turtles`),
unlist(run$`map [x -> [anadromous] of x ] sort turtles`),
unlist(run$`map [x -> [who] of x ] sort turtles`)
))
#' rename the variables
mydata <-
rename(
mydata,
sex = X1,
g = X2,
iteration = X3,
anadromous = X4,
who = X5
)
head(mydata)
#' make sure g is classified as numeric
mydata$g <- as.numeric(as.character(mydata$g))
head(mydata)
NLQuit()
print(rnorm(1,1,1))
exp(0.5)
exp(-1)
exp(-1.204)
#' what is the weekly mortality rate
#' where i is the instantaneous mortality rate per year
i = 0.1
(1 + i)^(1/52) - 1
#' what is the weekly mortality rate
#' where i is the instantaneous mortality rate per year
i = 0.1
(1 + i)^(1/12) - 1
#' what is the weekly mortality rate
#' where i is the instantaneous mortality rate per year
i = 0.58
(1 + i)^(1/52) - 1
#' annual mortality rate is given as 10%
amr <- 0.1
#' what is the daily mortality rate?
1 - (1 - amr) ^ (1 / 365)
#' or
1 - exp(1 / 365 * log (1 - amr))
#' what is the weekly mortality rate
#' where i is the instantaneous mortality rate per year
i = 0.1
(1 + i)^(1/365) - 1
#' annual mortality rate is given as 10%
amr <- 0.1
#' what is the daily mortality rate?
1 - (1 - amr) ^ (1 / 365)
#' or
1 - exp(1 / 365 * log (1 - amr))
#' what is the weekly mortality rate
#' where i is the instantaneous mortality rate per year
i = 0.1
(1 + i)^(1/365) - 1
#' annual mortality rate is given as 10%
amr <- 0.1
#' what is the daily mortality rate?
1 - (1 - amr) ^ (1 / 365)
#' or
1 - exp(1 / 365 * log (1 - amr))
#' what is the weekly mortality rate
#' where i is the instantaneous mortality rate per year
i = 0.1
(1 + i)^(1/365) - 1
x = 0.58
(1 + x)^(1/52) - 1
1 - (1 - x) ^ (1 / 52)
((1 + x)^(1/52)) - 1
1 - (1 - x) ^ (1 / 52)
x = 0.58
((1 + x)^(1/52)) - 1
1 - (1 - x) ^ (1 / 52)
0.008835436*2
1 - (1 - x) ^ (1 / 52)
0.01654432 ^ 52
1 - (1 - x) ^ (1 / 52)
1 - (1 - x) ^ (1 / 52)
1 - (1 - x) ^ (1 / 365)
1 - (1 - x) ^ (1 / 365)
1 - (1 - 0.58) ^ (1 / 365)
0.002373892 * 100
((1 - x)^(1/52)) - 1
1 - (1 - 0.58) ^ (1 / 365)
((1 - x)^(1/52)) - 1
1 - (1 - 0.58) ^ (1 / 52)
x = 0.58
((1 - x)^(1/52)) - 1
((1 - x)^(1/52))
1-((1 - x)^(1/52))
1 - (1 - 0.58) ^ (1 / 52)
1 - (1 - x) ^ (1 / 52)
install.packages("nlrx")
#' load the package
#' install if needed with install.packages("nlrx")
library(nlrx)
#' desktop version
nl <- nl(
nlversion = "6.0.4",
nlpath = "C:/Program Files/NetLogo 6.0.4/",
modelpath = "C:/Program Files/NetLogo 6.0.4/app/models/Sample Models/Biology/trout-migration-full-time-matrix-2019-10-26-NewLifeHistory-NewTime.nlogo",
jvmmem = 1024
)
#' define where you want the data saved
outpath <-
file.path("C:/Users/Adam Kane/Documents/Manuscripts/Trout migration/trout-migration")
#' attaching an experiment
nl@experiment <- experiment(
expname = "trout_migration",
outpath = outpath,
repetition = 1,
tickmetrics = "true",
idsetup = "setup",
idgo = "go",
runtime = 100, #' the model runs for 100 ticks
evalticks=seq(1,100,10), #' the model will extract data every 10 ticks
metrics = c(
"count turtles with [color = red]" #' count the males
),
constants = list(
"n-trout" = 3000, #' set the starting number of trout
"Check-Stability?" = "false" #' turn this off for the time  being
)
)
#' Evaluate if variables and constants are valid:
eval_variables_constants(nl)
nl@simdesign <- simdesign_simple(nl = nl, nseeds = 1)
# Run Simulation
init <- Sys.time()
results <- run_nl_all(nl = nl)
#' Check the results
head(results)
tail(results)
#' plot the data
plot(results$`[step]`, results$`count turtles with [color = red]`)
