0.3027061,
0.2809215,
0.2607046,
0.2419427,
0.2245310,
0),ncol=21)
dim(WM)
#' genotype matrix
GM <- matrix(sample(0:2,size = 21,replace = T),ncol=21)
dim(GM)
#' transpose of weights matrix
WMt <- t(WM)
#' multiply genotype matrix by transpose of weights matrix
#' this produces the genetic value
GM %*% WMt
#' change the parameter values
#'
#' starting population of trout
NLCommand("set n-trout 90")
#' male freshwater mortality
NLCommand("set mortalityM 1e-05")
#' female freshwater mortality
NLCommand("set mortalityF 1e-05")
#' male marine mortality multiplier
NLCommand("set anad-death-multiplierM 2")
#' female marine mortality multiplier
NLCommand("set anad-death-multiplierF 2")
#' cost of being parasitised multiplier
NLCommand("set parasite-load 3")
#' range that females can see potential mates
NLCommand("set female-mate-radius 3")
#' freshwater carrying capacity
NLCommand("set carrying-capacity 200")
#' proportion of marine patches that have parasites
NLCommand("set prop-parasites 0.1")
#' sneaker tactic by resident males on or off
NLCommand("set sneaker? TRUE")
#' set the threshold proportion of anadramous males
#' around which a resident should find itself before
#' adopting a sneaker tactic
NLCommand("set sneaker_thresh 0.8")
#' set the bump in quality that a sneaker male
#' gets which will affect its chance of being
#' selected
NLCommand("set sneaker_boost 200")
#' mean quality of resident trout
NLCommand("set res_quality_mean 100")
#' SD quality of resident trout
NLCommand("set res_quality_sd 10")
#' mean quality of parasitised trout
NLCommand("set paras_quality_mean 150")
#' SD quality of parasitised trout
NLCommand("set paras_quality_sd 10")
#' mean quality of marine trout
NLCommand("set anad_quality_mean 200")
#' SD quality of marine trout
NLCommand("set anad_quality_sd 10")
#' control the number of loci that have a different
#' sign in males than in females
NLCommand("set n-loci-sign 5")
#' setup the model
NLCommand("setup")
#' test the model
#' run it for 100 ticks
NLDoCommand(100, "go")
#' setup the model again after the test
NLCommand("setup")
#' set up a reporter to collect data on the genotype of both sexes
vars <- c("ticks", "who", "g" ,"sex", "anadromous", "gm_val")
agents <- "turtles"
reporters <- sprintf("map [x -> [%s] of x ] sort %s", vars, agents)
nlogo_ret <- RNetLogo::NLReport(reporters)
#' run the model for x by y ticks and extract the reporters
#' every y ticks
test <- NLDoReport(10, "repeat 1000 [go]", c("ticks",reporters), as.data.frame=T, df.col.names=c("ticks",reporters))
print(test)
class(test)
test$`map [x -> [g] of x ] sort turtles`
mydata <- data.frame(cbind(unlist(test$`map [x -> [sex] of x ] sort turtles`),
unlist(test$`map [x -> [g] of x ] sort turtles`),
unlist(test$`map [x -> [ticks] of x ] sort turtles`),
unlist(test$`map [x -> [anadromous] of x ] sort turtles`),
unlist(test$`map [x -> [who] of x ] sort turtles`)
))
#' rename the variables
mydata <- rename(mydata, sex = X1, g = X2, iteration = X3, anadromous = X4,  who = X5)
head(mydata)
#' make sure g is classified as numeric
mydata$g <- as.numeric(as.character(mydata$g))
head(mydata)
mydata$iteration <- factor(mydata$iteration,levels=c(mydata$iteration))
#' first for males
filter(mydata, sex == "male") %>% ggplot(.) +
geom_histogram(aes(g)) +
facet_wrap(~iteration)
#' now for females
filter(mydata, sex == "female") %>% ggplot(.) +
geom_histogram(aes(g)) +
facet_wrap(~iteration)
#' filter by resident males
filter(mydata, sex == "male", anadromous=="FALSE") %>% ggplot(.) +
geom_histogram(aes(g)) +
facet_wrap(~iteration)
#' boxplots
mydata %>% ggplot(.) +
geom_boxplot(aes(x=iteration,y=g))
ggplot(mydata,aes(as.numeric(as.character(sort(iteration))), g,col=sex)) +  stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "ribbon", fun.data = mean_cl_normal, alpha = 0.3)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
ggplot(mydata,aes(as.numeric(as.character(sort(iteration))), g,col=sex)) +  stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "ribbon", fun.data = mean_cl_normal, alpha = 0.3)
#' can extract the allele frequencies
alleleFreq <- data.frame(cbind(unlist(test$`map [x -> [gm_val] of x ] sort turtles`)))
head(alleleFreq)
#' rename
alleleFreq <- rename(alleleFreq, gm_val = cbind.unlist.test..map..x.....gm_val..of.x...sort.turtles...)
head(alleleFreq)
tail(alleleFreq,21)
length(alleleFreq$gm_val)/21
#' extract them for each fish
#' check this again to make sure it matches up!
lst <- split(alleleFreq$gm_val, (seq_along(alleleFreq$gm_val)-1) %% 21 +1); do.call(cbind, lapply(lst, "length<-", max(lengths(lst))))
#' stick them all together with the rest of the data
cbind(mydata,lst)
mydata <- cbind(mydata,lst)
tail(mydata)
#' first for males
filter(mydata, sex == "male") %>% ggplot(.) +
geom_histogram(aes(g)) +
facet_wrap(~iteration)
class(mydata$iteration)
levels(mydata$iteration)
filter(mydata, sex == "male") %>% ggplot(.) +
geom_histogram(aes(g)) +
facet_wrap(~reorder(iteration, sort(as.numeric(iteration))))
#' boxplots
mydata %>% ggplot(.) +
geom_boxplot(aes(x=iteration,y=g))
#' boxplots
mydata %>% ggplot(.) +
geom_boxplot(aes(x=sort(as.numeric(iteration)),y=g))
#' boxplots
mydata %>% ggplot(.) +
geom_boxplot(aes(x=iteration,y=g))
#' boxplots
mydata %>% ggplot(.) +
geom_boxplot(aes(x=reorder(iteration, sort(as.numeric(iteration))),y=g))
ggplot(mydata,aes(as.numeric(as.character(sort(iteration))), g,col=sex)) +  stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "ribbon", fun.data = mean_cl_normal, alpha = 0.3)
ggplot(mydata,aes(sort(as.numeric(iteration)), g,col=sex)) +  stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "ribbon", fun.data = mean_cl_normal, alpha = 0.3)
sort(as.numeric(iteration))
sort(as.numeric(mydata$iteration))
mydata
#' filter by resident males
filter(mydata, sex == "male", anadromous=="FALSE") %>% ggplot(.) +
geom_histogram(aes(g)) +
#' class of iteration needs to be changed so that it plot in numerical order
facet_wrap(~reorder(iteration, sort(as.numeric(iteration))))
ggplot(mydata,aes(as.numeric(as.character(sort(iteration))), g,col=sex)) +  stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "ribbon", fun.data = mean_cl_normal, alpha = 0.3)
as.numeric(as.character(sort(mydata$iteration))
)
ggplot(mydata,aes(x = reorder(iteration, sort(as.numeric(iteration))), g,col=sex)) +  stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "ribbon", fun.data = mean_cl_normal, alpha = 0.3)
ggplot(mydata,aes(x = reorder(sort(as.numeric(iteration))), g,col=sex)) +  stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "ribbon", fun.data = mean_cl_normal, alpha = 0.3)
ggplot(mydata,aes(x = reorder(sort(as.numeric(iteration))y = g), g,col=sex)) +  stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "ribbon", fun.data = mean_cl_normal, alpha = 0.3)
ggplot(mydata,aes(x = reorder(sort(as.numeric(iteration)),y = g), g,col=sex)) +  stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "ribbon", fun.data = mean_cl_normal, alpha = 0.3)
ggplot(mydata,aes(x = reorder(sort(as.numeric(iteration)),y = g), g,col=sex)) +  stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "ribbon", fun.data = mean_cl_normal, alpha = 0.3)
ggplot(mydata,aes(x = reorder(sort(as.numeric(iteration))), g,col=sex)) +  stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "ribbon", fun.data = mean_cl_normal, alpha = 0.3)
ggplot(mydata,aes(x = reorder(sort(as.numeric(iteration)), g,col=sex)) +  stat_summary(geom = "line", fun.y = mean) +
ggplot(mydata,aes(x = iteration, y = g, col = sex)) +  stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "ribbon", fun.data = mean_cl_normal, alpha = 0.3)
ggplot(mydata,aes(as.numeric(as.character(sort(iteration))), g,col=sex)) +  stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "ribbon", fun.data = mean_cl_normal, alpha = 0.3)
mydata %>% group_by(iteration, sex) %>% summarise(mean = mean(g))
mydata %>% group_by(sort(as.numeric(iteration)), sex) %>% summarise(mean = mean(g))
mydata %>% group_by(iteration, sex) %>% summarise(mean = mean(g))
reorder(as.numeric(as.character(iteration)))
reorder(as.numeric(as.character(mydata$iteration)))
#' check the summary stats
mydata$iteration <-
reorder(as.numeric(mydata$iteration))
mydata$iteration
#' check the summary stats
mydata$iteration <-
reorder(as.numeric(mydata$iteration))
#' check the summary stats
mydata %>% group_by(iteration, sex) %>% summarise(mean = mean(g))   %>%  arrange(., as.numeric(iteration))
#' check the summary stats
mydata %>% group_by(iteration, sex) %>% summarise(mean = mean(g))   %>%  arrange(mean, as.numeric(iteration))
#' check the summary stats
mydata %>% group_by(iteration, sex) %>% summarise(mean = mean(g))   %>%  arrange(iteration, as.numeric(iteration))
mydata$iteration <- paste(sort(as.integer(levels(mydata$iteration))))
mydata$iteration
filter(mydata, sex == "male") %>% ggplot(.) +
geom_histogram(aes(g)) +
#' class of iteration needs to be changed so that it plot in numerical order
facet_wrap(~reorder(iteration, sort(as.numeric(iteration))))
#' first for males
filter(mydata, sex == "male") %>% ggplot(.) +
geom_histogram(aes(g)) +   facet_wrap(iteration)
#' first for males
filter(mydata, sex == "male") %>% ggplot(.) +
geom_histogram(aes(g)) +   facet_wrap(~iteration)
#' first for males
filter(mydata, sex == "male") %>% ggplot(.) +
geom_histogram(aes(g)) +
#' class of iteration needs to be changed so that it plot in numerical order
facet_wrap(~reorder(iteration, sort(as.numeric(iteration))))
mydata <- data.frame(cbind(unlist(test$`map [x -> [sex] of x ] sort turtles`),
unlist(test$`map [x -> [g] of x ] sort turtles`),
unlist(test$`map [x -> [ticks] of x ] sort turtles`),
unlist(test$`map [x -> [anadromous] of x ] sort turtles`),
unlist(test$`map [x -> [who] of x ] sort turtles`)
))
#' rename the variables
mydata <- rename(mydata, sex = X1, g = X2, iteration = X3, anadromous = X4,  who = X5)
head(mydata)
#' make sure g is classified as numeric
mydata$g <- as.numeric(as.character(mydata$g))
head(mydata)
levels(mydata$iteration)
levels(mydata$iteration)
order(levels(mydata$iteration))
order(levels(as.numeric(mydata$iteration)))
factor(mydata$iteration, levels = c(1000,2000,3000,4000,5000,6000,7000,8000,9000,10000))#' plot the data
#' iteration should be treated as a factor for plotting so we need to make sure the order of levels makes sense
levels(mydata$iteration)
mydata$iteration <- factor(mydata$iteration, levels = c(1000,2000,3000,4000,5000,6000,7000,8000,9000,10000))
#' first for males
filter(mydata, sex == "male") %>% ggplot(.) +
geom_histogram(aes(g)) +
#' class of iteration needs to be changed so that it plot in numerical order
facet_wrap(~reorder(iteration, sort(as.numeric(iteration))))
#' now for females
filter(mydata, sex == "female") %>% ggplot(.) +
geom_histogram(aes(g)) +
facet_wrap(~iteration)
#' filter by resident males
filter(mydata, sex == "male", anadromous=="FALSE") %>% ggplot(.) +
geom_histogram(aes(g)) +
#' class of iteration needs to be changed so that it plot in numerical order
facet_wrap(~reorder(iteration, sort(as.numeric(iteration))))
#' boxplots
mydata %>% ggplot(.) +
geom_boxplot(aes(x=reorder(iteration, sort(as.numeric(iteration))),y=g))
ggplot(mydata,aes(as.numeric(as.character(sort(iteration))), g,col=sex)) +  stat_summary(geom = "line", fun.y = mean) +
stat_summary(geom = "ribbon", fun.data = mean_cl_normal, alpha = 0.3)
#' check the summary stats
mydata %>% group_by(iteration, sex) %>% summarise(mean = mean(g))
NLQuit()
#' R interface for trout migration model
#' tutorial for RNetLogo
#' https://www.youtube.com/watch?v=3EmHi0roiM8
#' you may need to download 64 bit java if you get an error
#' https://www.java.com/en/download/manual.jsp
#' load the libraries
library(RNetLogo)
library(ggplot2)
library(tidyverse)
library(Hmisc) # used for plotting
#' identify the location of NetLogo
#' this returns an error code but it still works
NLStart("C:\\Program Files\\NetLogo 6.0.4\\app",
gui = T,
nl.jarname = "netlogo-6.0.4.jar")
#' path to the model on my desktop
NLLoadModel(
"C:\\Users\\Adam Kane\\Documents\\Manuscripts\\Trout migration\\trout-migration\\trout-migration-full-time-matrix.nlogo"
)
#' path to the model on my laptop
NLLoadModel(
"C:\\Users\\Adam\\Documents\\Science\\Manuscripts\\trout-migration\\trout-migration-full-time-matrix.nlogo"
)
#' change the parameter values ---
#' starting population of trout
NLCommand("set n-trout 90")
#' male freshwater mortality
NLCommand("set mortalityM 1e-05")
#' female freshwater mortality
NLCommand("set mortalityF 1e-05")
#' male marine mortality multiplier
NLCommand("set anad-death-multiplierM 2")
#' female marine mortality multiplier
NLCommand("set anad-death-multiplierF 2")
#' cost of being parasitised multiplier
NLCommand("set parasite-load 3")
#' range that females can see potential mates
NLCommand("set female-mate-radius 3")
#' freshwater carrying capacity
NLCommand("set carrying-capacity 200")
#' proportion of marine patches that have parasites
NLCommand("set prop-parasites 0.1")
#' sneaker tactic by resident males on or off
NLCommand("set sneaker? TRUE")
#' set the threshold proportion of anadramous males
#' around which a resident should find itself before
#' adopting a sneaker tactic
NLCommand("set sneaker_thresh 0.8")
#' set the bump in quality that a sneaker male
#' gets which will affect its chance of being
#' selected
NLCommand("set sneaker_boost 200")
#' mean quality of resident trout
NLCommand("set res_quality_mean 100")
#' SD quality of resident trout
NLCommand("set res_quality_sd 10")
#' mean quality of parasitised trout
NLCommand("set paras_quality_mean 150")
#' SD quality of parasitised trout
NLCommand("set paras_quality_sd 10")
#' mean quality of marine trout
NLCommand("set anad_quality_mean 200")
#' SD quality of marine trout
NLCommand("set anad_quality_sd 10")
#' control the number of loci that have a different
#' sign in males than in females
NLCommand("set n-loci-sign 5")
#' setup the model
NLCommand("setup")
#' set up a reporter to collect data on the genotype of both sexes
vars <- c("ticks", "who", "g" , "sex", "anadromous", "gm_val")
agents <- "turtles"
reporters <- sprintf("map [x -> [%s] of x ] sort %s", vars, agents)
nlogo_ret <- RNetLogo::NLReport(reporters)
nlogo_ret
vars
g
maleG <- NLGetAgentSet(c("g"), "turtles with [sex = male]")
maleG <- NLGetAgentSet(c("g"), "turtles with [sex = "male"]")
maleG <- NLGetAgentSet(c("g"), "turtles with [sex = male]")
maleG <- NLGetAgentSet(c("g"), "turtles")
maleG
maleG <- NLGetAgentSet(c("g" ,"color"), "turtles")
turtle_G <- NLGetAgentSet(c("g" ,"color"), "turtles")
turtle_G
#' male color code is 15
#' female colour code is 5
maleG <- filter(turtle_G, color = 15)
#' male color code is 15
#' female colour code is 5
maleG <- filter(turtle_G, color == 15)
femaleG <- filter(turtle_G, color == 5)
maleG
#' male color code is 15
#' female colour code is 5
maleG <- filter(turtle_G, color == 15) %>% select(g)
maleG
femaleG <- filter(turtle_G, color == 5) %>% select(g)
femaleG
cor.test(maleG,femaleG)
maleG
maleG
class(maleG)
cor.test(as.numeric(maleG),as.numeric(femaleG))
cor.test(maleG$g,femaleG$g)
?if
?ifelse
unequal(maleG,femaleG)
unequal <- function(x, y) {
ifelse(length(x) > length(y),
z <- head(x, length(y)),
z <- head(y, length(x)))
}
unequal(maleG,femaleG)
cor.test(maleG$g,head(femaleG$g,length(maleG$g)))
#' control the number of loci that have a different
#' sign in males than in females
NLCommand("set n-loci-sign 20")
#' setup the model
NLCommand("setup")
turtle_G <- NLGetAgentSet(c("g" ,"color"), "turtles")
#' male color code is 15
#' female colour code is 5
maleG <- filter(turtle_G, color == 15) %>% select(g)
femaleG <- filter(turtle_G, color == 5) %>% select(g)
cor.test(maleG$g,head(femaleG$g,length(maleG$g)))
cor.test(head(maleG$g,length(female$g)),femaleG$g))
cor.test(head(maleG$g,length(female$g),femaleG$g))
cor.test(head(maleG$g,length(femaleG$g),femaleG$g))
cor.test(head(maleG$g,length(femaleG$g)), femaleG$g)
maleG
femaleG
#' change the parameter values ---
#' starting population of trout
NLCommand("set n-trout 100")
#' setup the model
NLCommand("setup")
turtle_G <- NLGetAgentSet(c("g" ,"color"), "turtles")
#' male color code is 15
#' female colour code is 5
maleG <- filter(turtle_G, color == 15) %>% select(g)
femaleG <- filter(turtle_G, color == 5) %>% select(g)
cor.test(maleG$g,head(femaleG$g,length(maleG$g)))
cor.test(head(maleG$g,length(femaleG$g)), femaleG$g)
femaleG
maleG
#' setup the model
NLCommand("setup")
turtle_G <- NLGetAgentSet(c("g" ,"color"), "turtles")
#' male color code is 15
#' female colour code is 5
maleG <- filter(turtle_G, color == 15) %>% select(g)
femaleG <- filter(turtle_G, color == 5) %>% select(g)
cor.test(maleG$g,head(femaleG$g,length(maleG$g)))
cor.test(head(maleG$g,length(femaleG$g)), femaleG$g)
#' control the number of loci that have a different
#' sign in males than in females
NLCommand("set n-loci-sign 20")
turtle_G <- NLGetAgentSet(c("g" ,"color"), "turtles")
#' male color code is 15
#' female colour code is 5
maleG <- filter(turtle_G, color == 15) %>% select(g)
femaleG <- filter(turtle_G, color == 5) %>% select(g)
cor.test(maleG$g,head(femaleG$g,length(maleG$g)))
cor.test(head(maleG$g,length(femaleG$g)), femaleG$g)
#' control the number of loci that have a different
#' sign in males than in females
NLCommand("set n-loci-sign 20")
#' setup the model
NLCommand("setup")
turtle_G <- NLGetAgentSet(c("g" ,"color"), "turtles")
#' male color code is 15
#' female colour code is 5
maleG <- filter(turtle_G, color == 15) %>% select(g)
femaleG <- filter(turtle_G, color == 5) %>% select(g)
cor.test(maleG$g,head(femaleG$g,length(maleG$g)))
#' control the number of loci that have a different
#' sign in males than in females
NLCommand("set n-loci-sign 20")
turtle_G <- NLGetAgentSet(c("g" ,"color"), "turtles")
#' male color code is 15
#' female colour code is 5
maleG <- filter(turtle_G, color == 15) %>% select(g)
femaleG <- filter(turtle_G, color == 5) %>% select(g)
cor.test(maleG$g,head(femaleG$g,length(maleG$g)))
cor.test(head(maleG$g,length(femaleG$g)), femaleG$g)
#' control the number of loci that have a different
#' sign in males than in females
NLCommand("set n-loci-sign 20")
#' set up a reporter to collect data on the genotype of both sexes
vars <- c("ticks", "who", "g" , "sex", "anadromous", "gm_val")
agents <- "turtles"
reporters <- sprintf("map [x -> [%s] of x ] sort %s", vars, agents)
nlogo_ret <- RNetLogo::NLReport(reporters)
turtle_G <- NLGetAgentSet(c("g" ,"color"), "turtles")
#' male color code is 15
#' female colour code is 5
maleG <- filter(turtle_G, color == 15) %>% select(g)
femaleG <- filter(turtle_G, color == 5) %>% select(g)
cor.test(maleG$g,head(femaleG$g,length(maleG$g)))
cor.test(head(maleG$g,length(femaleG$g)), femaleG$g)
#' control the number of loci that have a different
#' sign in males than in females
NLCommand("set n-loci-sign 20")
#' setup the model
NLCommand("setup")
turtle_G <- NLGetAgentSet(c("g" ,"color"), "turtles")
#' male color code is 15
#' female colour code is 5
maleG <- filter(turtle_G, color == 15) %>% select(g)
femaleG <- filter(turtle_G, color == 5) %>% select(g)
cor.test(maleG$g,head(femaleG$g,length(maleG$g)))
cor.test(head(maleG$g,length(femaleG$g)), femaleG$g)
#' sign in males than in females
NLCommand("set n-loci-sign 20")
#' setup the model
NLCommand("setup")
turtle_G <- NLGetAgentSet(c("g" ,"color"), "turtles")
#' male color code is 15
#' female colour code is 5
maleG <- filter(turtle_G, color == 15) %>% select(g)
femaleG <- filter(turtle_G, color == 5) %>% select(g)
cor.test(maleG$g,head(femaleG$g,length(maleG$g)))
cor.test(head(maleG$g,length(femaleG$g)), femaleG$g)
#' control the number of loci that have a different
#' sign in males than in females
NLCommand("set n-loci-sign 20")
#' setup the model
NLCommand("setup")
turtle_G <- NLGetAgentSet(c("g" ,"color"), "turtles")
#' male color code is 15
#' female colour code is 5
maleG <- filter(turtle_G, color == 15) %>% select(g)
femaleG <- filter(turtle_G, color == 5) %>% select(g)
cor.test(maleG$g,head(femaleG$g,length(maleG$g)))
cor.test(head(maleG$g,length(femaleG$g)), femaleG$g)
#' control the number of loci that have a different
#' sign in males than in females
NLCommand("set n-loci-sign 20")
#' setup the model
NLCommand("setup")
turtle_G <- NLGetAgentSet(c("g" ,"color"), "turtles")
#' male color code is 15
#' female colour code is 5
maleG <- filter(turtle_G, color == 15) %>% select(g)
femaleG <- filter(turtle_G, color == 5) %>% select(g)
cor.test(maleG$g,head(femaleG$g,length(maleG$g)))
cor.test(head(maleG$g,length(femaleG$g)), femaleG$g)
femaleG
maleG
plot(maleG$g,head(femaleG$g,length(maleG$g)))
plot(head(maleG$g,length(femaleG$g)), femaleG$g)
NLQuit()
